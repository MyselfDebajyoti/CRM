"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+dddl$#i9wcnf7pp_e3$fz1mk8099fa%zg#*8b!j95glrodn(+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'base',
    'hrm',
    'django.contrib.humanize',
]

DATE_INPUT_FORMATS = [
    '%Y-%m-%d',
    '%d/%m/%Y',
    '%d-%m-%Y',
]

DATETIME_INPUT_FORMATS = [
    '%Y-%m-%d %H:%M:%S',
    '%Y-%m-%d %H:%M',
    '%d/%m/%Y %H:%M:%S',
    '%d/%m/%Y %H:%M',
    '%Y-%m-%dT%H:%M:%S',
    '%Y-%m-%dT%H:%M',
]

# Time zone setting (if not already set)
USE_TZ = True
TIME_ZONE = 'Asia/Kolkata'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    
    
]

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = False  # Must be False for JavaScript access
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'https://crm-two-bice.vercel.app/',
]


ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'
AUTH_USER_MODEL = 'base.User'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import dj_database_url  # Add this at the top if using connection string
import os

import os
import dj_database_url
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

DATABASES = {
    'default': dj_database_url.parse(
        os.getenv('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=True
    )
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', 'static')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# HRM specific settings
HRM_SETTINGS = {
    'STANDARD_WORK_HOURS': 8,
    'STANDARD_LOGIN_TIME': '09:00',
    'LATE_THRESHOLD_MINUTES': 15,
    'OFFICE_RADIUS_METERS': 500,
    'MONTHLY_REVIEW_DATE': 25,
    'LEAVE_REQUEST_ESCALATION_HOURS': 48,
}

# Login URLs (if using Django auth)
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/hrm/'
LOGOUT_REDIRECT_URL = '/admin/login/'

import os

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Email Configuration - Hide only sensitive data
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_SSL = False
EMAIL_USE_TLS = True
# EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = 'aqhcbbfqlqzqxckw'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL')

# Additional Email Settings
EMAIL_TIMEOUT = 30  # Timeout in seconds
EMAIL_SUBJECT_PREFIX = '[Financial CRM] '  # Optional: Prefix for all email subjects

# Company Information (for email templates)
COMPANY_NAME = 'ILNB Financial CRM'
SUPPORT_EMAIL = 'mailer@ilnb.co.in'

# Security Settings for Production
if not DEBUG:  # Only in production
    SECURE_SSL_REDIRECT = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Session and CSRF Settings
SESSION_COOKIE_SECURE = not DEBUG  # True in production
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 3600  # 1 hour
CSRF_COOKIE_SECURE = not DEBUG  # True in production
CSRF_COOKIE_HTTPONLY = True

# Password Reset Settings
PASSWORD_RESET_TIMEOUT = 86400  # 24 hours (in seconds)

# Logging Configuration for Email Debugging
import tempfile

# Create handlers based on environment
handlers = {
    'console': {
        'level': 'DEBUG',
        'class': 'logging.StreamHandler',
        'formatter': 'simple',
    },
}

# Try to add file handler if possible
try:
    # Check if we can write to logs directory
    log_dir = 'logs'
    if not os.path.exists(log_dir):
        os.makedirs(log_dir, exist_ok=True)
    
    # Test if we can write to the directory
    test_file = os.path.join(log_dir, 'test.log')
    with open(test_file, 'w') as f:
        f.write('test')
    os.remove(test_file)
    
    # If successful, add file handler
    handlers['email_file'] = {
        'level': 'INFO',
        'class': 'logging.FileHandler',
        'filename': 'logs/django_email.log',
        'formatter': 'verbose',
    }
    email_handlers = ['email_file', 'console']
    app_handlers = ['email_file', 'console']
    
except (OSError, PermissionError):
    # If file logging fails, use only console
    email_handlers = ['console']
    app_handlers = ['console']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': handlers,
    'loggers': {
        'django.core.mail': {
            'handlers': email_handlers,
            'level': 'DEBUG',
            'propagate': True,
        },
        'base.views': {  # Your app name
            'handlers': app_handlers,
            'level': 'INFO',
            'propagate': True,
        },
    },
}